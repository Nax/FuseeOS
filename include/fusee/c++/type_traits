#ifndef _CXX_TYPE_TRAITS
#define _CXX_TYPE_TRAITS

#include <cstddef>

namespace std
{

template <typename T, T v> struct integral_constant;
template <bool B> using bool_constant = integral_constant<bool, B>;
using true_type                       = bool_constant<true>;
using false_type                      = bool_constant<false>;

template <typename T> struct is_void;
template <typename T> struct is_null_pointer;

template <typename T> struct is_const;
template <typename T> struct is_volatile;

template <typename T> struct remove_cv;
template <typename T> struct remove_const;
template <typename T> struct remove_volatile;

template <typename T> struct make_signed;
template <typename T> struct make_unsigned;

template <typename T, typename U> struct is_same;

/* C++14 helpers */
#if (__cplusplus >= 201402L)
template <typename T> using remove_cv_t       = typename remove_cv<T>::type;
template <typename T> using remove_const_t    = typename remove_const<T>::type;
template <typename T> using remove_volatile_t = typename remove_volatile<T>::type;

template <typename T> using make_signed_t   = typename make_signed<T>::type;
template <typename T> using make_unsigned_t = typename make_unsigned<T>::type;
#endif

/* C++17 helpers */
#if (__cplusplus >= 201703L)
template <typename T> inline constexpr bool is_void_v         = is_void<T>::value;
template <typename T> inline constexpr bool is_null_pointer_v = is_null_pointer_v<T>::value;

template <typename T> inline constexpr bool is_const_v    = is_const<T>::value;
template <typename T> inline constexpr bool is_volatile_v = is_volatile<T>::value;

template <typename T, typename U> inline constexpr bool is_same_v = is_same<T, U>::value;
#endif

/* Internal helpers */
template <typename T> struct __make_type
{
    typedef T type;
};

template <typename T, typename U> struct __copy_cv : __make_type<T>
{};
template <typename T, typename U> struct __copy_cv<T, const U> : __make_type<const T>
{};
template <typename T, typename U> struct __copy_cv<T, volatile U> : __make_type<volatile T>
{};
template <typename T, typename U> struct __copy_cv<T, const volatile U> : __make_type<const volatile T>
{};

template <typename T> struct __make_signed
{};
template <> struct __make_signed<unsigned char> : __make_type<signed char>
{};
template <> struct __make_signed<unsigned short> : __make_type<signed short>
{};
template <> struct __make_signed<unsigned int> : __make_type<signed int>
{};
template <> struct __make_signed<unsigned long> : __make_type<signed long>
{};
template <> struct __make_signed<unsigned long long> : __make_type<signed long long>
{};

template <typename T> struct __make_unsigned
{};
template <> struct __make_unsigned<signed char> : __make_type<unsigned char>
{};
template <> struct __make_unsigned<signed short> : __make_type<unsigned short>
{};
template <> struct __make_unsigned<signed int> : __make_type<unsigned int>
{};
template <> struct __make_unsigned<signed long> : __make_type<unsigned long>
{};
template <> struct __make_unsigned<signed long long> : __make_type<unsigned long long>
{};

/* Definitions */
template <typename T, T v>
struct integral_constant
{
    using value_type = T;
    using type       = integral_constant;

    static constexpr T value = v;

    constexpr            operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }
};

template <typename T> struct is_void : is_same<typename remove_cv<T>::type, void>
{};

template <typename T> struct is_null_pointer : is_same<typename remove_cv<T>::type, nullptr_t>
{};

template <typename T> struct is_const : false_type
{};
template <typename T> struct is_const<const T> : true_type
{};

template <typename T> struct is_volatile : false_type
{};
template <typename T> struct is_volatile<volatile T> : true_type
{};

template <typename T, typename U> struct is_same : false_type
{};
template <typename T> struct is_same<T, T> : true_type
{};

template <typename T> struct remove_cv : __make_type<T>
{};
template <typename T> struct remove_cv<const T> : __make_type<T>
{};
template <typename T> struct remove_cv<volatile T> : __make_type<T>
{};
template <typename T> struct remove_cv<const volatile T> : __make_type<T>
{};

template <typename T> struct remove_const : __make_type<T>
{};
template <typename T> struct remove_const<const T> : __make_type<T>
{};

template <typename T> struct remove_volatile : __make_type<T>
{};
template <typename T> struct remove_volatile<volatile T> : __make_type<T>
{};

template <typename T> struct make_signed : __copy_cv<typename __make_signed<typename remove_cv<T>::type>::type, T>
{};
template <typename T> struct make_unsigned : __copy_cv<typename __make_unsigned<typename remove_cv<T>::type>::type, T>
{};

} // namespace std

#endif
